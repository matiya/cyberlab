---
# tasks file for psm installation

- hosts: all
  gather_facts: false
  vars_files:
    - ../../vars.yml
  vars:
    - psm_installationautomation: "{{psm_media}}\\InstallationAutomation"
    - psm_log_install: "C:\\Windows\\Temp\\psm_install.log"
    - psm_service_name: "Cyber-Ark Privileged Session Manager"

  tasks:
    - name: Set installation folder on xml config file
      ansible.windows.win_powershell:
        script: |
          try
          {
          ### This script set the install directory received from var in the install config file
          $filePath = "{{ psm_installationautomation}}\\Installation\\InstallationConfig.xml"
          $xml = [xml](Get-Content $filePath)
          $step1 = $xml.SelectSingleNode("//Parameter[@Name = 'InstallationDirectory']")
          $step1.Value = "{{ psm_installation_path }}"
          $step2 = $xml.SelectSingleNode("//Parameter[@Name = 'RecordingDirectory']")
          $step2.Value = "{{ psm_installation_path }}\PSM\Recordings"
          $xml.Save($filePath)
            exit 0
          }
          catch
          {
            Write-Error "Error occured during SetAtrributeInXML"
            exit 1
          }

    - name: Execute PSM installation
      ansible.windows.win_powershell:
        creates: "{{ psm_installation_path}}\\PSM\\CAPSM.exe"
        chdir: "{{ psm_installationautomation }}"
        script: |
          $Action = .\Execute-Stage.ps1 "{{ psm_installationautomation}}\Installation\InstallationConfig.xml" -silentMode "Silent" -displayJson -delayedrestart
          $Action | Out-File -FilePath "{{ psm_log_install }}"
          $Result = Get-Content "{{ psm_log_install }}" -Raw | ConvertFrom-Json
          if ($Result.isSucceeded -ne 0) {
            Write-Error "PSM Installation has failed "
            exit 1
          } else {
            exit 0
          }

    - name: Get log path for installation
      ansible.windows.win_powershell:
        script: |
          $Result = Get-Content "{{ psm_log_install }}"
          Write-Host $Result
      register: log_result

    - name: Fetch installation log from path
      ansible.builtin.fetch:
        src: "{{ item.logPath }}"
        dest: "../logs/"
        flat: true
      with_items:
        - "{{ log_result.host_out | from_json }}"

    - name: Check install status
      ansible.builtin.fail:
        msg: "Install failed: {{ (log_result['host_out']| from_json)['errorData'] }}"
      when: (log_result['host_out']| from_json)['isSucceeded']

    - name: Reboot when PSM Installation requires reboot
      ansible.windows.win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.host_out | from_json }}"
      when:
        - item.restartRequired

    - name: check PSM service status
      ansible.windows.win_service:
        name: "{{ psm_service_name }}"
      register: psm_service_info

    - ansible.builtin.set_fact:
        psm_exists: "{{ psm_service_info.exists }}"
