---
# tasks file for psm installation

- hosts: all
  gather_facts: false
  vars_files:
    - ../../vars.yml
  vars:
    - psm_installationautomation: "{{psm_media}}\\InstallationAutomation"
    - psm_status_postinstall: "C:\\Windows\\Temp\\psm_postinstall.status"
    - psm_log_postinstall: "C:\\Windows\\Temp\\psm_postinstall.log"
    - psm_service_name: "Cyber-Ark Privileged Session Manager"

  tasks:
    - name: Run PSM post installation
      ansible.windows.win_powershell:
        chdir: "{{ psm_installationautomation }}"
        script: |
          $Action = .\Execute-Stage.ps1 "{{ psm_installationautomation }}\PostInstallation\PostInstallationConfig.xml" -silentMode "Silent" -displayJson
          $Action | Out-File -FilePath "{{ psm_status_postinstall }}"
          $Result = Get-Content "{{ psm_status_postinstall }}" -Raw | ConvertFrom-Json
          if ($Result.isSucceeded -ne 0) {
          Write-Error "PSM post installation failed: $error"
            exit 1
          } else {
            exit 0
          }

    - name: Get log path for post installation
      ansible.windows.win_powershell:
        script: |
          $Result = Get-Content "{{ psm_status_postinstall }}"
          Write-Host $Result
      register: log_result

    - name: Fetch postinstall log from path
      ansible.builtin.fetch:
        src: "{{ item.logPath }}"
        dest: "../logs/"
        flat: true
      with_items:
        - "{{ log_result.host_out | from_json }}"

    - name: Reboot when PSM Post Installation requires reboot
      ansible.windows.win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.host_out | from_json }}"
      when:
        - item.restartRequired

    - name: validate users exists and password expiration
      ansible.windows.win_powershell:
        error_action: stop
        script: |
          try {
            $user = Get-WmiObject -Class Win32_UserAccount -Filter {Name = "PSMConnect"}
            if ($user -eq $null) {
              Write-Error "post-install failure: User PSMConnect was not created"
              exit  1
          }
            $user = Get-WmiObject -Class Win32_UserAccount -Filter {Name = "PSMAdminConnect"}
          if ($user -eq $null) {
            Write-Error "post-install failure: User PSMAdminConnect was not created"
            exit  1
          }
          exit 0
          } catch {
            Write-Error "Error occured: $error"
            exit 1
          }
