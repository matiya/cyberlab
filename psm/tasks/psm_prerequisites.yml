# -*- eval: (ansible) -*-
---
- hosts: all
  gather_facts: false
  vars_files:
    - ../../vars.yml

  vars:
    - psm_installationautomation: "{{psm_media}}\\InstallationAutomation"
    - psm_status_prerequisites: "C:\\Windows\\Temp\\psm_prerequisites.status"
    - psm_log_prerequisites: "C:\\Windows\\Temp\\psm_prerequisites.log"

  tasks:
    - name: Copy Installers
      ansible.windows.win_copy:
        src: "{{psm_installers}}"
        dest: C:\_media\

    - name: Unpack installers
      ansible.windows.win_powershell:
        chdir: C:\_media\
        script: |
          ls "C:\_media\Privileged Session Manager-Rls-v{{pas_version}}.zip" | Expand-Archive
        creates: C:\_media\Privileged Session Manager-Rls-v{{pas_version}}\

    - name: Update NLA & UpdateRDSSecurityLayer installation
      ansible.windows.win_powershell:
        script: |
          try {
          $filePath = "{{ psm_installationautomation }}\\Prerequisites\\PrerequisitesConfig.xml"
          $xml = [xml](Get-Content $filePath)
          $step1 = $xml.SelectSingleNode("//Step[@Name = 'DisableNLA']")
          $step1.Enable = 'No'
          $step2 = $xml.SelectSingleNode("//Step[@Name = 'UpdateRDSSecurityLayer']")
          $step2.Enable = 'Yes'
          $xml.Save($filePath)
            exit 0
          }
          catch
          {
            Write-Error "Error occured during SetAtrributeInXML"
            exit 1
          }

    - name: Run PSM prerequisities
      ansible.windows.win_powershell:
        chdir: "{{ psm_installationautomation }}"
        script: |
          $Action = .\Execute-Stage.ps1 '{{ psm_installationautomation }}\Prerequisites\PrerequisitesConfig.xml' -silentMode "Silent" -displayJson -delayedrestart
          $Action | Out-File -FilePath '{{ psm_status_prerequisites }}'
          $Result = Get-Content '{{ psm_status_prerequisites }}' -Raw | ConvertFrom-Json
          if ($Result.isSucceeded -ne 0) {
            Write-Error "PSM Prerequisites has failed: $error"
            exit 1
          } else {
            exit 0
          }

    - name: Get log path for prerequisities
      ansible.windows.win_powershell:
        script: |
          $Result = Get-Content "{{ psm_status_prerequisites }}"
          Write-Host $Result
      register: log_result

    - name: Fetch registration log from path
      ansible.builtin.fetch:
        src: "{{ item.logPath }}"
        dest: "../logs/"
        flat: true
      with_items:
        - "{{ log_result.host_out | from_json }}"

    - name: Check prerequisites status
      ansible.builtin.fail:
        msg: "Prerequisites failed: {{ (log_result['host_out']| from_json)['errorData'] }}"
      when: (log_result['host_out']| from_json)['isSucceeded']

    - name: Reboot when PSM Prerequisites requires reboot
      ansible.windows.win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.host_out | from_json }}"
      when:
        - item.restartRequired

    - name: Continue execute PSM prerequisites after restart (if required)
      ansible.windows.win_powershell:
        chdir: "{{ psm_installationautomation }}"
        script: |
          $Action = .\Execute-Stage.ps1 "{{ psm_installationautomation }}\Prerequisites\PrerequisitesConfig.xml" -silentMode "Silent" -displayJson
          $Action | Out-File -FilePath "{{ psm_log_prerequisites }}"
          $Result = Get-Content "{{ psm_log_prerequisites }}" -Raw | ConvertFrom-Json
          if ($Result.isSucceeded -ne 0) {
            Write-Error "PSM prerequisites after restart failed"
            exit 1
            } else {
            exit 0
            }

    - name: Get log path for prerequisites
      ansible.windows.win_powershell:
        script: |
          $Result = Get-Content "{{ psm_log_prerequisites }}"
          Write-Host $Result
      register: log_result

    - name: Reboot when PSM Prerequisites requires reboot
      ansible.windows.win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.host_out | from_json }}"
      when:
        - item.restartRequired

    - name: Check prerequisites status
      ansible.builtin.fail:
        msg: "Prerequisites failed: {{ (log_result['host_out']| from_json)['errorData'] }}"
      when: (log_result['host_out']| from_json)['isSucceeded']
